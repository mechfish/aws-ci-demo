---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Build VPC with public subnet, IGW, route tables, ACL, CodePipeline.

Parameters:
  AppName:
    Type: String
    Description: "Name of the application"
    MinLength: 2
    MaxLength: 15
    Default: "a4tp"
    AllowedPattern: "[a-z0-9][-. a-z0-9]*"
    ConstraintDescription: >-
      Must be between 2 and 15 characters long, lowercase and may
      contain alphanumeric characters, hyphens (-), and dots (.), but
      must start with alphanumeric.

  GitHubUser:
    Type: String
    Default: mechfish
    Description: Your GitHub username

  GitHubToken:
    Type: String
    Description: >-
      Go to https://github.com/settings/tokens to create/find a token for your account.

  GitHubRepoName:
    Type: String
    Default: aws-ci-demo
    Description: Name of the repository containing the application.

  GitHubBranchName:
    Type: String
    Default: master
    Description: Name of the branch that should be deployed.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair for SSH access to the instances."

# FIXME: Put the bucket name as a parameter.

  BuildKey:
    Type: String
    Default: initial-build.zip
    Description: Key which points to the build to be deployed, in the S3 bucket.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Application
        Parameters:
          - AppName
      - Label:
          default: Application Source - GitHub
        Parameters:
          - GitHubUser
          - GitHubToken
          - GitHubRepoName
          - GitHubBranchName
      - Label:
          default: SSH Configuration
        Parameters:
          - KeyName

Mappings:
  VPCIpSpace:
    us-east-1:
      RANGE: 10.42
    us-west-2:
      RANGE: 10.43

  SubnetTypeIpRanges:
    public:
      RANGE: 0.0/17

  publicSubnetConfig:
    publicSubnet01:
      CIDR: 10.0/24

  AWSRegionVirt2AMI:
    # To find new base AMIs at any given time, visit https://aws.amazon.com/amazon-linux-ami/
    us-east-1:
      HVM: "ami-c481fad3"
    us-west-2:
      HVM: "ami-b04e92d0"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub
        - "${Ipspc}.0.0/16"
        - { Ipspc: !FindInMap [ VPCIpSpace, !Ref "AWS::Region", "RANGE" ]}
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AwsCiDemo-VPC

  publicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Sub
        - "${Ipspc}.${SubnetConf}"
        - Ipspc: !FindInMap [ VPCIpSpace, !Ref "AWS::Region", "RANGE" ]
          SubnetConf: !FindInMap [ publicSubnetConfig, "publicSubnet01", "CIDR" ]
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: SubnetType
          Value: Public
        - Key: Name
          Value: publicSubnet01

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AwsCiDemoIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRTAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: NetworkAcl

  InboundPublicNAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 2000
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535

  OutboundPublicNAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn:
      - PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 2000
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535

  publicSubnetNetworkAclAssociation01:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - PublicNetworkAcl
    Properties:
      SubnetId: !Ref publicSubnet01
      NetworkAclId: !Ref PublicNetworkAcl

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "demo-${AWS::Region}-${AWS::AccountId}-${AppName}"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: "AwsCiDemo-S3Bucket"

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Path: /

  WebServerRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BackendRole
      Roles:
        - !Ref WebServerRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: cloudformation:DescribeStackResources
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
          - Effect: Allow
            Action:
              - autoscaling:Describe*
              - autoscaling:EnterStandby
              - autoscaling:ExitStandby
              - autoscaling:UpdateAutoScalingGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub "arn:aws:s3:::demo-${AWS::Region}-${AWS::AccountId}-${AppName}"
              - !Sub "arn:aws:s3:::demo-${AWS::Region}-${AWS::AccountId}-${AppName}/*"

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebServerRole

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: udp
          FromPort: 123 # NTP protocol
          ToPort: 123
          CidrIp: "0.0.0.0/0"
        - IpProtocol: udp
          FromPort: 9418 # Git
          ToPort: 9418
          CidrIp: "0.0.0.0/0"
        - IpProtocol: icmp
          FromPort: -1  # any ICMP port: ping, etc.
          ToPort: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: WebServerSG

  WebServerBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: WebServerBalancerSG

  WebServerBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Scheme: internet-facing
      Subnets:
        - !Ref publicSubnet01
      SecurityGroups:
        - !Ref WebServerBalancerSG
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
      HealthCheck:
        HealthyThreshold: 3
        Interval: 5
        Target: "HTTP:80/index.html"
        Timeout: 2
        UnhealthyThreshold: 3
      ConnectionDrainingPolicy:
        Enabled: True
        Timeout: 10
      Tags:
        - Key: Name
          Value: WebServerBalancer

  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - WebServerSG
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [ AWSRegionVirt2AMI, !Ref "AWS::Region", "HVM" ]
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      SecurityGroups:
        - !Ref WebServerSG
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -ex
            echo "Launching build ${BuildKey}"
            yum update -y aws-cfn-bootstrap
            # Update the AWS CLI to the latest version
            yum install -y aws-cli

            function error_exit
            {
            echo "Sleeping for 5 minutes of debugging time"
            sleep 600
            /opt/aws/bin/cfn-signal --exit-code 1 --region ${AWS::Region} --stack ${AWS::StackName} --resource WebServerASG
            exit 1
            }

            # Run cfn-init to execute the ASG's AWS::CloudFormation::Init template
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource WebServerASG || error_exit "Failed to complete cfn-init"

            # If all went well, signal success
            /opt/aws/bin/cfn-signal --exit-code 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource WebServerASG

  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - WebServerSG
      - WebServerBalancerSG
    Properties:
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      LoadBalancerNames:
        - !Ref WebServerBalancer
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub "${AppName}-webs-asg"
          PropagateAtLaunch: true
        - Key: ServerType
          Value: "web"
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref publicSubnet01
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Metadata:
      "AWS::CloudFormation::Init":
        config:
          packages:
            yum:
              nginx: [ "1:1.10.1-1.28.amzn1.x86_64" ]
          sources:
            /usr/share/nginx/html: !Sub "https://${S3Bucket}.s3.amazonaws.com/${BuildKey}"
          commands:
            ownership:
              command: "chown -R nginx.nginx /usr/share/nginx/html"
          services:
            sysvinit:
              nginx:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/nginx/nginx.conf"
                sources:
                  - "/usr/share/nginx/html"
      "AWS::CloudFormation::Authentication":
        "S3AccessKey":
          type: S3
          buckets:
            - !Ref S3Bucket
          roleName: !Ref WebServerRole

  CodePipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Sid: "1"
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  CodePipelineLambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - CodePipelineLambdaRole
    Properties:
      PolicyName: CodePipelineLambdaPolicy
      Roles:
        - !Ref CodePipelineLambdaRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:*"
            Resource:
              - "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - codepipeline:AcknowledgeJob
              - codepipeline:GetJobDetails
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              # Okay, I don't have time to do the dance where I
              # iteratively lock down the permissions, so here's a
              # BIG SCARY shortcut!
              #
              # TODO: get rid of this
              - "ec2:*"
              - "cloudformation:*"
              - "s3:*"
              - "iam:*"
              - "elasticloadbalancing:*"
              - "autoscaling:*"
              - "lambda:*"
            Resource: "*"

  CodePipelineLambdaDummy:
    Type: AWS::Lambda::Function
    DependsOn:
      - CodePipelineLambdaRole
      - CodePipelineLambdaPolicy
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: "Lambdas.zip"
      Role: !GetAtt CodePipelineLambdaRole.Arn
      Description: "Always return success"
      Timeout: 20
      Handler: lambdadummy.lambda_handler
      Runtime: python2.7
      MemorySize: 128

  CiPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - CodePipelineLambdaDummy
    Properties:
      Name: !Sub "${AppName}-Pipeline"
      DisableInboundStageTransitions:
        - Reason: Demonstration
          StageName: Update
      RoleArn: !GetAtt CodePipelineLambdaRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: !Sub "${AppName}-SourceArtifact"
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepoName
                Branch: !Ref GitHubBranchName
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - InputArtifacts:
                - Name: !Sub "${AppName}-SourceArtifact"
              Name: Build
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              OutputArtifacts:
                - Name: !Sub "${AppName}-Build"
              Configuration:
                FunctionName: !Ref CodePipelineLambdaDummy
                UserParameters: !Sub |
                  {"stack": "${AWS::StackName}",
                  "artifact": "${AppName}-SourceArtifact",
                  "file": "myfile"}
              RunOrder: 1
        - Name: Update
          Actions:
            - InputArtifacts:
                - Name: !Sub "${AppName}-Build"
              Name: UpdateStack
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              OutputArtifacts: []
              Configuration:
                FunctionName: !Ref CodePipelineLambdaDummy
                UserParameters: !Ref AWS::StackName
              RunOrder: 1

Outputs:
  VpcId:
    Value: !Ref MyVPC
    Description: VPC ID
  IGWId:
    Value: !Ref InternetGateway
    Description: Internet Gateway ID
  PublicSubnetA:
    Value: !Ref publicSubnet01
    Description: Public subnet in AZ A
  ApplicationSource:
    Value: !Sub "https://github.com/${GitHubUser}/${GitHubRepoName}/tree/${GitHubBranchName}"
    Description: Location of the app source code.
  BalancerDNSName:
    Value: !GetAtt WebServerBalancer.DNSName
    Description: DNS name where the load-balanced site can be found.
  CodePipelineURL:
    Value: !Sub "https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CiPipeline}"
